1) Create element using  react api - React.createElement("<tag>", {props}, "Content")
2) Create a root for dom manipulation - React.createRoot(document.getElementById("root"))
3) root.render(the element)


for production, we need parcel to build the app using npx parcel index.html

parcel
dev build'
local server
HMR = Hot module replacement uses a file watching algorithm
Faster builds - by caching
Image optimization
Minification of files - Bundler (compress)
Consistent hashing
code splitting
differential bundling

configuring scripts in package.json
npm run start (can also be npm start)
npm run build 

React mein there r two types of components
Class Based
Function Based

props are basically arguments to a function

Two export types: default export and expor


export default component;
import component from path;

export const component;
import {component} from path


React hooks normal js utility functions
useState() -  powerful state variables
useEffect()

When state variables update, react re-renders the component

useEffect Notes
if empty dependency array then useEfect is called once on initial render


Routing in react application using the library: react-router-dom

Hook given by react-router-dom 
useRouteError

Navigate to new page without reloading the whole page
link component from react-router-dom

Dynamic Routing :id useParams variable

class Based component
class extends React.Component

Life cycle of react class based component

constructor -> render -> componentDidMount()
make api call in componentDidMount()


Other functions are componentDidUpdate() 
componentWillUnmount()

U also have a concept of lazy loading -> using lazy function in node
Suspense and fallback in react-router-dom

Higher Order components -. Take existing component and return an update version of it 

Data management


reactContext
createContext => working
const UserContext = createContext({
    loggedInUser: 'default User'
})

const {loggedInUser} = useContext(UserContextv )
useContext
<UserContext.Consumer>
{
    (data) => console.log("The context data is " + data)
}
< UserContext.Counsumer />

<UserContext.Provider value=({loggedInUser: userName(state variable)})





